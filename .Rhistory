install.packages("rlang")
library(usethis)
library(devtools)
BiocManager::install("vctrs")
library(usethis)
library(devtools)
q()
g++ --version
system('g++ -v')
getwd()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
roxygen2::roxygenise()
library(devtools)
check()
library(devtools)
check()
check()
library(devtools)
check()
library(devtools)
library(usethis)
.libPaths()
library(devtools)
detach("package:devtools", unload = TRUE)
library(usethis)
library(usethis)
library(devtools)
check()
library(usethis)
q()
library(usethis)
library(devtools)
check()
Sys.getenv("PATH")
Rcpp::compileAttributes()
check()
library(RcppArmadillo)
check()
library(Rcpp)
library(RcppArmadillo)
check()
library(usethis)
library(devtools)
check()
Rcpp::sourceCpp("src/code.cpp")
rm(list = ls())
Rcpp::sourceCpp("src/code.cpp")
rm(list = ls())
Rcpp::compileAttributes()
check()
check()
check()
?optim
?read.csv
check()
use_gpl3_license()
check()
q()
library(usethis)
library(devtools)
check()
library(usethis)
library(devtools)
library(Rcpp)
library(RcppArmadillo)
check()
Rcpp::compileAttributes()
check()
system('g++ -v')
check()
check()
Sys.getenv("PATH")
Rcpp::compileAttributes()
roxygen2::roxygenise()
Rcpp::compileAttributes()
check()
Rcpp::compileAttributes()
check()
Sys.getenv("PATH")
library(usethis)
library(devtools)
check()
library(usethis)
library(devtools)
Sys.getenv("PATH")
check()
Rcpp::compileAttributes()
check()
Rcpp::compileAttributes()
roxygen2::roxygenise()
check()
Rcpp::sourceCpp("src/code.cpp")
rm(list = ls())
check()
library(usethis)
library(devtools)
check()
Rcpp::sourceCpp("src/code.cpp")
check()
library(usethis)
library(devtools)
check()
Rcpp::compileAttributes()
check()
check()
check()
Rcpp::sourceCpp("src/code.cpp")
usethis::use_data()
rm(list = ls())
#install.packages("./hfunmap_0.0.0.9000.tar.gz")
load_all()
test_data <- hfun_load_data(address.p = "../../database/phe_test.csv",
address.g = "../../database/geno_test10.csv",
Times = c(1,3,5,7,9,11,13,16,19,23,28,32,39,47),
missing = TRUE,
log.p = FALSE,
fit.check = FALSE)
test_data <- hfun_load_data(address.p = "../database/phe_test.csv",
address.g = "../database/geno_test10.csv",
Times = c(1,3,5,7,9,11,13,16,19,23,28,32,39,47),
missing = TRUE,
log.p = FALSE,
fit.check = FALSE)
test_data
usethis::use_data(test_data)
rm(list = ls())
Rcpp::sourceCpp("src/code.cpp")
rm(list = )
rm(list = ls())
Rcpp::compileAttributes()
check()
library(usethis)
library(devtools)
check()
document()
check()
library(hfunmap)
check()
Rcpp::sourceCpp("src/code.cpp")
rm(list = ls())
check()
c
d
library(usethis)
library(devtools)
check()
Rcpp::sourceCpp("src/code.cpp")
library(hfunmap)
devtools::load_all(".")
rm(list = ls())
library(usethis)
library(devtools)
check()
Rcpp::sourceCpp("src/code.cpp")
Rcpp::sourceCpp("src/code.cpp")
check()
library(hfunmap)
check()
rm(list = ls())
library(usethis)
library(devtools)
check()
library(usethis)
library(devtools)
use_data_raw()
rm(list = ls())
#install.packages("./hfunmap_0.0.0.9000.tar.gz")
load_all()
test_data <- hfun_load_data(address.p = "../database/phe_test.csv",
address.g = "../database/geno_test10.csv",
Times = c(1,3,5,7,9,11,13,16,19,23,28,32,39,47),
missing = TRUE,
log.p = FALSE,
fit.check = FALSE)
use_data(test_data)
document()
load_all()
data(hfunmap)
data("test_data")
test_data$dat.p
test_data$dat.g
test_data$dat.t
test_data$dat.r
test_data$dat.m
test_data$dat.ng
?test_data
system.time(res <- hfun_lr_cal(format_data = test_data,interval = c(1:10)))
plot(1:10,res[,1])
LR_only=FALSE
(LR_only==FALSE)
View(res)
class(res[,1])
format_data <- test_data
interval <- 3
permu_times=100
interval <- c(1:3)
pheno <- as.matrix(format_data$dat.p)
geno <- as.matrix(format_data$dat.g)
times <- format_data$dat.t
ranks <- format_data$dat.r
dat_missing <- format_data$dat.m
sample_num <- dim(pheno)[1]
sample_num
c <- matrix(NA,nrow = permu_times,ncol = sample_num)
c
permu_times
for(i in 1:sample_num){
c[i,]<- sample(c(1:sample_num),sample_num)
}
sample(c(1:sample_num),sample_num)
length(sample(c(1:sample_num),sample_num))
dim(c)
c <- matrix(NA,nrow = permu_times,ncol = sample_num)
for(i in 1:sample_num){
c[i,1:sample_num]<- sample(c(1:sample_num),sample_num)
}
c <- matrix(NA,nrow = permu_times,ncol = sample_num)
c <- matrix(NA,nrow = permu_times,ncol = sample_num)
for(i in 1:permu_times){
c[i,]<- sample(c(1:sample_num),sample_num)
}
View(c)
dim(c)
unique(c)
dim(unique(c))
c <- matrix(NA,nrow = permu_times,ncol = sample_num)
for(i in 1:permu_times){
c[i,]<- sample(c(1:sample_num),sample_num)
}
lr_all <- sapply(c(1:permu_times),function(x){
format_data$dat.p <- pheno[c[i,],];
y <- hfun_lr_cal(format_data = format_data,interval = interval,LR_only = TRUE)
return(y)
})
#' cur_lower        numeric of curve parameters lower set, default is rep(1e-3,3)
#' cur_upper        numeric of curve parameters upper set, default is rep(1000,3)
#' cur_control      list of curve DEoptim control, default is list(itermax=500,trace=F), more details see ?DEoptim
#' cov_lower        numeric of cov-matrix parameters lower set, default is 1e-3
#' cov_upper        numeric of cov-matrix parameters upper set, default is 100
#' cov_control      list of cov-matrix DEoptim control, default is list(itermax=500,trace=F), more details see ?DEoptim
#' @param LR_only logical whether output only include LR value, default is FALSE
#'
#' @return matrix of lr_calculate form example c(LR,H1_mle$value,H1_mle$par,H0_mle$value,H0_mle$par)
#' @export
hfun_lr_cal <- function(format_data,interval,useinv=TRUE,usecpp=TRUE,ini_control=NULL,LR_only=FALSE){
pheno <- as.matrix(format_data$dat.p)
geno <- as.matrix(format_data$dat.g)
times <- format_data$dat.t
ranks <- format_data$dat.r
dat_missing <- format_data$dat.m
if(is.null(ini_control)){ini_control <- list(cur_lower=rep(1e-3,3),cur_upper=rep(1000,3),cur_control=list(itermax=500,trace=F),
cov_lower=1e-3,cov_upper=100,cov_control=list(itermax=500,trace=F))}
interval <- sort(interval)
ng <- format_data$dat.ng
res_col <- (3*ranks+(3+ranks)*ranks/2) + (3*ranks*ng+(3+ranks)*ranks/2) + 3
res <- matrix(data = 0,nrow = max(interval),ncol = res_col)
if(dat_missing==TRUE){
for(i in interval){
nSNP <- geno[i,]
missings <- which(nSNP==-9)
if(length(missings)>0){
SNP1 <- nSNP[-(missings)]
pheno1 <- pheno[-(missings),]
}else{
SNP1 <- nSNP
pheno1 <- pheno
}
nphe <- pheno1
NSNP <- as.numeric(SNP1)
iterm <- 0
while(iterm<10){
ini_par <- try(hfun_get_ini(phe = nphe,Times = times,ranks = ranks,control = ini_control),silent = T)
if(class(ini_par)=="try-error"){
iterm <- iterm + 1
next
}else if(min(ini_par)<0){
iterm <- iterm + 1
next
}else{
break
}
}
if(class(ini_par)=="try-error"){
res[i,1] <- NA
cat("SNP",i,": LR=",NA,"para =",NA,"\n")
next
}else if(min(ini_par)<0){
res[i,1] <- NA
cat("SNP",i,": LR=",NA,"para =",NA,"\n")
next
}
H0_lower <- ini_par * 0.95
H0_upper <- ini_par * 1.05
H0_res <- try(stats::optim(par = ini_par,fn=hfun_H0_mle,N_phe=nphe,pheT=times,ranks=ranks,
method = "L-BFGS-B",lower = H0_lower,upper = H0_upper,
control = list(maxit=5000,trace=F,REPORT=1,parscale=rep(.1^0,length(ini_par)))),silent = TRUE)
if(class(H0_res)=="try-error"){
res[i,1] <- NA
cat("SNP",i,": LR=",NA,"para =",NA,"\n")
next
}
H0_value <- H0_res$value
nnd <- length(table(NSNP))
differ.gene <- names(table(NSNP))
pheno_list <- list()
H1_ini_par <- c(rep(H0_res$par[1:(3*ranks)],nnd),H0_res$par[-(1:(3*ranks))])
H1_lower <- H1_ini_par * 0.99
H1_upper <- H1_ini_par * 1.01
for(s in 1:nnd){
class.n <- which(NSNP==differ.gene[s])
pheno_list[[s]] <- as.matrix(nphe[class.n,])
}
H1_res <- try(stats::optim(par = H1_ini_par,fn=hfun_H1_mle,pheno=pheno_list,Times=times,ranks=ranks,
ng=nnd,method = "L-BFGS-B",lower = H1_lower,upper = H1_upper,control = list(maxit=5000,
trace=F,REPORT=1)),silent = TRUE)
if(class(H1_res)=="try-error"){
res[i,1] <- NA
cat("SNP",i,": LR=",NA,"para =",NA,"\n")
next
}
LR <- 2 * (H0_value - H1_res$value)
all_para <- as.numeric(c(LR,H1_res$value,H1_res$par,H0_res$value,H0_res$par))
res[i,1:length(all_para)] <- all_para
cat("SNP",i,": LR =",LR,"\n")
}
}else{
ini_par <- try(hfun_get_ini(phe = pheno,Times = times,ranks = ranks,control = ini_control),silent = T)
if(class(ini_par)=="try-error"){
cat("something is wrong in HO parameters initialize!\n")
return("error!\n")
}
H0_lower <- ini_par * 0.95
H0_upper <- ini_par * 1.05
H0_res <- try(stats::optim(par = ini_par,fn=hfun_H0_mle,N_phe=pheno,pheT=times,ranks=ranks,
method = "L-BFGS-B",lower = H0_lower,upper = H0_upper,
control = list(maxit=5000,trace=F,REPORT=1,parscale=rep(.1^0,length(ini_par)))),silent = TRUE)
if(class(H0_res)=="try-error"){
cat("something is wrong in H0 optim!\n")
return("error!\n")
}
H0_value <- H0_res$value
for(i in interval){
nSNP <- geno[i,]
nphe <- pheno
NSNP <- as.numeric(nSNP)
nnd <- length(table(NSNP))
differ.gene <- names(table(NSNP))
pheno_list <- list()
H1_ini_par <- c(rep(H0_res$par[1:(3*ranks)],nnd),H0_res$par[-(1:(3*ranks))])
H1_lower <- H1_ini_par * 0.99
H1_upper <- H1_ini_par * 1.05
for(s in 1:nnd){
class.n <- which(NSNP==differ.gene[s])
pheno_list[[s]] <- as.matrix(nphe[class.n,])
}
H1_res <- try(stats::optim(par = H1_ini_par,fn=hfun_H1_mle,pheno=pheno_list,Times=times,ranks=ranks,
ng=nnd,method = "L-BFGS-B",lower = H1_lower,upper = H1_upper,control = list(maxit=5000,
trace=F,REPORT=1)),silent = TRUE)
if(class(H1_res)=="try-error"){
res[i,1] <- NA
cat("SNP",i,": LR=",NA,"para =",NA,"\n")
next
}
LR <- 2 * (H0_value - H1_res$value)
all_para <- as.numeric(c(LR,H1_res$value,H1_res$par,H0_res$value,H0_res$par))
res[i,1:length(all_para)] <- all_para
cat("SNP",i,": LR =",LR,"\n")
}
}
output <- res[interval,]
if(LR_only==TRUE){
output <- output[,1]
}
return(output)
}
lr_all <- sapply(c(1:permu_times),function(x){
format_data$dat.p <- pheno[c[i,],];
y <- hfun_lr_cal(format_data = format_data,interval = interval,LR_only = TRUE)
return(y)
})
permu_times=5
pheno <- as.matrix(format_data$dat.p)
geno <- as.matrix(format_data$dat.g)
times <- format_data$dat.t
ranks <- format_data$dat.r
dat_missing <- format_data$dat.m
sample_num <- dim(pheno)[1]
c <- matrix(NA,nrow = permu_times,ncol = sample_num)
for(i in 1:permu_times){
c[i,]<- sample(c(1:sample_num),sample_num)
}
lr_all <- sapply(c(1:permu_times),function(x){
format_data$dat.p <- pheno[c[i,],];
y <- hfun_lr_cal(format_data = format_data,interval = interval,LR_only = TRUE)
return(y)
})
View(lr_all)
cutlevel1 <- apply(lr_all,2,max(...,na.rm = TRUE))
cutlevel1 <- apply(lr_all,2,function(x){max(x,na.rm = TRUE)})
cutlevel1
apply(lr_all,2,function(x){max(x,na.rm = TRUE)})
apply(lr_all,2,function(x){max(x,na.rm = TRUE)})
(permu_times * cutp)
cutp=0.05
(permu_times * cutp)
1000*0.05
round(permu_times * cutp)
round(permu_times * cutp,digits = 1)
round(permu_times * cutp,digits = 2)
round(permu_times * cutp)
nn <- round(permu_times * cutp)
if(nn<1){nn <- 1}
sort(apply(lr_all,2,function(x){max(x,na.rm = TRUE)}))
cutlevel1 <- sort(apply(lr_all,2,function(x){max(x,na.rm = TRUE)}),decreasing = TRUE)
cutlevel1
cutlevel1 <- sort(apply(lr_all,2,function(x){max(x,na.rm = TRUE)}),decreasing = TRUE)[nn]
cutlevel1
apply(lr_all,2,function(x){sort(x,decreasing = TRUE)[nn]})
cutlevel2 <- max(apply(lr_all,2,function(x){sort(x,decreasing = TRUE)[nn]}))
cutlevel2
rm(list = )
rm(list = ls())
Rcpp::compileAttributes()
roxygen2::roxygenise()
check()
Rcpp::sourceCpp("src/code.cpp")
rm(list = ls())
check()
library(usethis)
library(devtools)
check()
library(usethis)
library(devtools)
check()
Rcpp::sourceCpp("src/code.cpp")
check()
library(usethis)
library(devtools)
check()
library(usethis)
library(devtools)
check()
Rcpp::compileAttributes()
check()
library(hfunmap)
devtools::load_all(".")
check()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
check()
Rcpp::sourceCpp("src/code.cpp")
rm(list)
rm(list = ls())
check()
check()
system('g++ -v')
library(usethis)
library(devtools)
check()
library(usethis)
library(devtools)
check()
getwd()
use_vignette("my-vignette")
library(hfunmap)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(hfunmap)
library(hfunmap)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
check()
check()
check()
>install.packages("C:/yourpath/hfunmap0.0.0.9.zip", repos=NULL)
knitr::opts_chunk$set(eval = FALSE, include = FALSE)
>install.packages("C:/yourpath/hfunmap0.0.0.9.zip", repos=NULL)
knitr::opts_chunk$set(eval = FALSE, include = FALSE)
'>install.packages("C:/yourpath/hfunmap0.0.0.9.zip", repos=NULL)'
'>install.packages("C:/yourpath/hfunmap0.0.0.9.zip", repos=NULL)'
library(hfunmap)
data("test_data")
test_data$dat.t
check()
q()
library(usethis)
library(devtools)
check()
check()
getwd()
